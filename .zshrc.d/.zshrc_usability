_echo '  start set PATH'
## export(PATH)関連
#export PATH=~/.bin:~/.nimble/bin:~/.local/bin:~/opt/cross/bin:$PATH
#export PATH=~/.config/composer/vendor/bin:$PATH
export PYTHONPATH=/usr/local/lib/python3.6/dist-packages:$PYTHONPATH
export XDG_CONFIG_HOME=~/.config
export PREFIX="$HOME/opt/cross"
export TARGET=i686-elf
export PGDATA=/usr/local/var/postgres
# export VIMRUNTIME=$VIMRUNTIME:~/.vim/
export LESS='-R' #lessコマンドを常時カラー表示できるようにする
#export LANG=ja_JP.UTF-8
export LANGUAGE=ja
export TERM=xterm-256color
export DOTFILES=${HOME}/dotfiles # dotfilesを設定しておく

_echo '  start alias'
# alias関連
#alias touchpad-disable='xinput disable 12'
#alias touchpad-enabe='xinput enable 12'
#alias touchpad-on-off='touchpad-on-off.sh'
alias reload='exec zsh'
alias more='\less -R'
alias django-go='python3 manage.py runserver'
alias django="./manage.py"
alias venv-start='source bin/activate'
alias show-ssh-settings='cat ~/.ssh/config'
alias pacman='sudo pacman'
alias powerpill='sudo powerpill'
alias rm='rm -i'
alias cp='cp -i'
alias ls="ls --color=always"
alias activate="source bin/activate"

_echo '  start compinit'
# コマンドの自動補完
# どうやらzplugでやってるっぽい？
# とりあえず動かさないようにしてみた
# autoload -U compinit
# compinit
## 関連して、間違ったら修正を表示
setopt correct

# ヒストリの設定
## ヒストリの共通化
setopt share_history

## 場所
HISTFILE=~/.zsh_history

## 個数
HISTSIZE=1000000
SAVEHIST=1000000

## 重複の可否(今回は重複なし)
# setopt hist_ignore_dups

### 重複したら古いコマンドを消す
setopt hist_ignore_all_dups

## スペースで始まるコマンドを履歴に残さない
setopt hist_ignore_space

_echo '  start pushd'
# cdしたら自動でpushdする
setopt auto_pushd

_echo '  start bindkey'
# bindey関連
## emacs風のキーバインド
bindkey -e

## その他のキーバインド

_echo '  start user_Made'

# exportのもろもろ
export EDITOR='nvim'
export VISUAL='nvim'



# 自作関数
## emacsを起動する際に&をくっつける
#function _emacs() {
#  command emacs $* &
#}

## 現在のPATHの一覧を表示
function echo_PATH() {
  echo $PATH > ~/PATH.txt
  command sed -e "s/:/\n/g" ~/PATH.txt |cat > ~/PATH.cache
  command cp ~/PATH.cache ~/PATH.txt
  command rm ~/PATH.cache
  if [ $# -ge 1 ];then
     if [ $1 = "more" ];then
        command more ~/PATH.txt
     elif [ $1 = "cat" ];then
        command cat ~/PATH.txt
     else
        echo 'Please select "cat" or "more".'
     fi
  else
    command cat ~/PATH.txt
  fi
}

## gccした時にファイル名と同じ実行ファイルを生成する
## きちんとしたMAKEFILEを書くように習慣付けるほうがいいと思う
#function gcc() {
#    out=`echo $1 | awk -F '.' '{print $1}'`
#    command gcc $@ -o ${out}
#}

#cdls
clear_flag=true
function toggle_clear_flag(){
  if $clear_flag;then
    clear_flag=false;
  else
    clear_flag=true;
  fi
}

function cdls(){
  if $clear_flag;then
    builtin cd $@ && clear && ls;
  else
    builtin cd $@ && ls;
  fi
}

# gitのアカウントを登録する
# ~/.git-usersファイルを作り、そこに名前とメルアドを入れておく
function gituser-add () {
  if test ! $1;then
    echo "Please type 'gituser-add USERNAME'"
    return
  fi
  # ユーザー名で、~/.git-usersを検索する
  TARGET_STRING=`grep $1 ~/.git-users`
  if test ! ${TARGET_STRING};then
    echo "$1 does not exist."
    return
  fi
  GIT_USER_ARRAY=(`echo ${TARGET_STRING} | tr -s ':' ' '`)
  git config user.name "${GIT_USER_ARRAY[1]}"
  git config user.email "${GIT_USER_ARRAY[2]}"
  git config user.signingkey "${GIT_USER_ARRAY[3]}"
  git config --list | grep user
}

# gitignore.ioからデータ引っ張って来て、gitignoreを作ってもらう
function get-gitignore () {
  QUERY=$@
  echo ${QUERY// /,}
  curl -sSL https://gitignore.io/api/${QUERY// /,} >> .gitignore
}

# autoenvを言語ごとに自動設定する
function copy-default-autoenv () {
  if test $# != 1 ;then
    echo "usage: $ copy-default-autoenv [language]"
  else
    if [[ -e $HOME/.zshrc.d/autoenv_default/$1 ]];then
      cp $HOME/.zshrc.d/autoenv_default/$1/.autoenv* .
    else
      echo "$1's default autoenv does not exist."
    fi
  fi
}

# dotfilesにディレクトリを登録する
# いちいち、dotfilesにcpしてlnするのは面倒なので...
function regist-dot () {
	TARGET=$1
	CURRENT=$(pwd)
	if [[ ! $CURRENT = $HOME ]]; then
		H_C="${CURRENT#${HOME}/}/" # $HOMEからのファイルパス
	else
		H_C=""
	fi

	# lnのオプションを指定
	if test -f ${CURRENT}/${TARGET}; then
		LN_OPT="-sf"
	elif test -d ${CURRENT}/${TARGET}; then
		LN_OPT="-sd"
	else
		echo "does not good"
		return 1
	fi

	# DOTFILESからファイルを移動しリンク
	mkdir -p ${DOTFILES}/${H_C} # 必要ならディレクトリを生成(あったら無視される)
	mv ${TARGET} ${DOTFILES}/${H_C} # ファイルの移動 ↓リンク
	ln ${LN_OPT} ${DOTFILES}/${H_C}${TARGET} ${HOME}/${H_C}${TARGET}
}
